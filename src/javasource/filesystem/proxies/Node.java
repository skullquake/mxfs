// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package filesystem.proxies;

public class Node
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject nodeMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "FileSystem.Node";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Name("Name"),
		Path("Path"),
		NodeType("NodeType"),
		Node_Node("FileSystem.Node_Node");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Node(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "FileSystem.Node"));
	}

	protected Node(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject nodeMendixObject)
	{
		if (nodeMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("FileSystem.Node", nodeMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a FileSystem.Node");

		this.nodeMendixObject = nodeMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Node.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static filesystem.proxies.Node initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return filesystem.proxies.Node.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static filesystem.proxies.Node initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		if (com.mendix.core.Core.isSubClassOf("FileSystem.File", mendixObject.getType()))
			return filesystem.proxies.File.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("FileSystem.Folder", mendixObject.getType()))
			return filesystem.proxies.Folder.initialize(context, mendixObject);

		if (com.mendix.core.Core.isSubClassOf("FileSystem.SymLink", mendixObject.getType()))
			return filesystem.proxies.SymLink.initialize(context, mendixObject);

		return new filesystem.proxies.Node(context, mendixObject);
	}

	public static filesystem.proxies.Node load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return filesystem.proxies.Node.initialize(context, mendixObject);
	}

	public static java.util.List<? extends filesystem.proxies.Node> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<filesystem.proxies.Node> result = new java.util.ArrayList<filesystem.proxies.Node>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//FileSystem.Node" + xpathConstraint))
			result.add(filesystem.proxies.Node.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of Path
	 */
	public final java.lang.String getPath()
	{
		return getPath(getContext());
	}

	/**
	 * @param context
	 * @return value of Path
	 */
	public final java.lang.String getPath(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Path.toString());
	}

	/**
	 * Set value of Path
	 * @param path
	 */
	public final void setPath(java.lang.String path)
	{
		setPath(getContext(), path);
	}

	/**
	 * Set value of Path
	 * @param context
	 * @param path
	 */
	public final void setPath(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String path)
	{
		getMendixObject().setValue(context, MemberNames.Path.toString(), path);
	}

	/**
	 * Set value of NodeType
	 * @param nodetype
	 */
	public final filesystem.proxies.enum_nodetype getNodeType()
	{
		return getNodeType(getContext());
	}

	/**
	 * @param context
	 * @return value of NodeType
	 */
	public final filesystem.proxies.enum_nodetype getNodeType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.NodeType.toString());
		if (obj == null)
			return null;

		return filesystem.proxies.enum_nodetype.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of NodeType
	 * @param nodetype
	 */
	public final void setNodeType(filesystem.proxies.enum_nodetype nodetype)
	{
		setNodeType(getContext(), nodetype);
	}

	/**
	 * Set value of NodeType
	 * @param context
	 * @param nodetype
	 */
	public final void setNodeType(com.mendix.systemwideinterfaces.core.IContext context, filesystem.proxies.enum_nodetype nodetype)
	{
		if (nodetype != null)
			getMendixObject().setValue(context, MemberNames.NodeType.toString(), nodetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.NodeType.toString(), null);
	}

	/**
	 * @return value of Node_Node
	 */
	public final filesystem.proxies.Node getNode_Node() throws com.mendix.core.CoreException
	{
		return getNode_Node(getContext());
	}

	/**
	 * @param context
	 * @return value of Node_Node
	 */
	public final filesystem.proxies.Node getNode_Node(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		filesystem.proxies.Node result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Node_Node.toString());
		if (identifier != null)
			result = filesystem.proxies.Node.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Node_Node
	 * @param node_node
	 */
	public final void setNode_Node(filesystem.proxies.Node node_node)
	{
		setNode_Node(getContext(), node_node);
	}

	/**
	 * Set value of Node_Node
	 * @param context
	 * @param node_node
	 */
	public final void setNode_Node(com.mendix.systemwideinterfaces.core.IContext context, filesystem.proxies.Node node_node)
	{
		if (node_node == null)
			getMendixObject().setValue(context, MemberNames.Node_Node.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Node_Node.toString(), node_node.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return nodeMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final filesystem.proxies.Node that = (filesystem.proxies.Node) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "FileSystem.Node";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
