// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package filesystem.proxies;

public class SymLink extends filesystem.proxies.Node
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "FileSystem.SymLink";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Name("Name"),
		Path("Path"),
		NodeType("NodeType"),
		SymLink_Node("FileSystem.SymLink_Node"),
		Node_Node("FileSystem.Node_Node");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public SymLink(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "FileSystem.SymLink"));
	}

	protected SymLink(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject symLinkMendixObject)
	{
		super(context, symLinkMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("FileSystem.SymLink", symLinkMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a FileSystem.SymLink");
	}

	/**
	 * @deprecated Use 'SymLink.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static filesystem.proxies.SymLink initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return filesystem.proxies.SymLink.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static filesystem.proxies.SymLink initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new filesystem.proxies.SymLink(context, mendixObject);
	}

	public static filesystem.proxies.SymLink load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return filesystem.proxies.SymLink.initialize(context, mendixObject);
	}

	public static java.util.List<filesystem.proxies.SymLink> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<filesystem.proxies.SymLink> result = new java.util.ArrayList<filesystem.proxies.SymLink>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//FileSystem.SymLink" + xpathConstraint))
			result.add(filesystem.proxies.SymLink.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of SymLink_Node
	 */
	public final filesystem.proxies.Node getSymLink_Node() throws com.mendix.core.CoreException
	{
		return getSymLink_Node(getContext());
	}

	/**
	 * @param context
	 * @return value of SymLink_Node
	 */
	public final filesystem.proxies.Node getSymLink_Node(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		filesystem.proxies.Node result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.SymLink_Node.toString());
		if (identifier != null)
			result = filesystem.proxies.Node.load(context, identifier);
		return result;
	}

	/**
	 * Set value of SymLink_Node
	 * @param symlink_node
	 */
	public final void setSymLink_Node(filesystem.proxies.Node symlink_node)
	{
		setSymLink_Node(getContext(), symlink_node);
	}

	/**
	 * Set value of SymLink_Node
	 * @param context
	 * @param symlink_node
	 */
	public final void setSymLink_Node(com.mendix.systemwideinterfaces.core.IContext context, filesystem.proxies.Node symlink_node)
	{
		if (symlink_node == null)
			getMendixObject().setValue(context, MemberNames.SymLink_Node.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.SymLink_Node.toString(), symlink_node.getMendixObject().getId());
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final filesystem.proxies.SymLink that = (filesystem.proxies.SymLink) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "FileSystem.SymLink";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Override
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
